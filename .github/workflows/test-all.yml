# .github/workflows/test-all.yml
# Multi-language testing workflow for R and MATLAB components

name: Test All Components

on:
  push:
    branches: [ create-tests ]  # Only run on your create-tests branch
  pull_request:
    branches: [ create-tests ]  # Only run on PRs to create-tests branch
  workflow_dispatch:             # Allow manual triggering from any branch

jobs:
  # Test R scripts in combine_gl directory
  test-r-combine:
    runs-on: ubuntu-latest
    name: Test R (combine_gl)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.3.0'
        
    - name: Install R packages
      run: |
        install.packages(c("testthat", "R.matlab"))
      shell: Rscript {0}
      
    - name: Run R tests
      working-directory: combine_gl
      run: |
        library(testthat)
        
        # Source your R functions
        source("clean_data.R")
        source("calc_d.R") 
        source("check_orientation.R")
        source("checker.R")
        source("helpers.R")
        
        # Run R tests
        test_dir("tests/testthat", reporter = "progress")
        
        cat("R tests completed successfully!\n")
      shell: Rscript {0}

  # Test MATLAB scripts in group_level directory with custom test file
  test-matlab-group:
    runs-on: ubuntu-latest
    name: Test MATLAB (group_level)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up MATLAB
      uses: matlab-actions/setup-matlab@v2
        
    - name: Run custom MATLAB group_level tests
      working-directory: group_level
      run: |
        % Run the custom test suite
        fprintf('Starting MATLAB group-level tests...\n');
        
        % Check if test file exists
        if exist('run_group_level_tests.m', 'file')
            % Run custom tests
            test_results = run_group_level_tests();
            
            % Check results and exit with appropriate code
            if test_results.tests_failed > 0
                fprintf('MATLAB tests failed!\n');
                exit(1);
            else
                fprintf('All MATLAB tests passed!\n');
                exit(0);
            end
        else
            fprintf('Test file not found. Creating minimal test...\n');
            
            % Minimal fallback test
            try
                % Test basic MATLAB functionality
                test_data = randn(10, 5);
                test_mean = mean(test_data);
                test_std = std(test_data);
                
                assert(length(test_mean) == 5, 'Mean should have correct length');
                assert(length(test_std) == 5, 'Std should have correct length');
                
                fprintf('Basic MATLAB functionality test passed!\n');
                exit(0);
            catch ME
                fprintf('Basic test failed: %s\n', ME.message);
                exit(1);
            end
        end
      
    - name: Upload MATLAB test outputs (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: matlab-group-test-outputs
        path: |
          group_level/*.log
          group_level/test_*.txt
        if-no-files-found: ignore


  # Test MATLAB scripts in subject_level directory
  test-matlab-subject:
    runs-on: ubuntu-latest  
    name: Test MATLAB (subject_level)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up MATLAB
      uses: matlab-actions/setup-matlab@v2
      with:
        release: R2023b
        
    - name: Run MATLAB subject_level tests
      uses: matlab-actions/run-tests@v2
      with:
        source-folder: subject_level
        test-results-junit: subject_level_test_results.xml
        code-coverage-cobertura: subject_level_coverage.xml
        
    - name: Upload subject_level test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: subject-level-test-results
        path: |
          subject_level_test_results.xml
          subject_level_coverage.xml

  # Summary job that depends on all test jobs
  test-summary:
    runs-on: ubuntu-latest
    name: Test Summary
    needs: [test-r-combine, test-matlab-group, test-matlab-subject]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test Results Summary:"
        echo "R (combine_gl): ${{ needs.test-r-combine.result }}"
        echo "MATLAB (group_level): ${{ needs.test-matlab-group.result }}"
        echo "MATLAB (subject_level): ${{ needs.test-matlab-subject.result }}"
        
        if [[ "${{ needs.test-r-combine.result }}" != "success" || 
              "${{ needs.test-matlab-group.result }}" != "success" || 
              "${{ needs.test-matlab-subject.result }}" != "success" ]]; then
          echo "Some tests failed!"
          exit 1
        else
          echo "All tests passed!"
        fi
